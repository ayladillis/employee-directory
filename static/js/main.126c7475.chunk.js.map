{"version":3,"sources":["logo.svg","components/Jumbotron/Jumbotron.js","components/Navbar/Navbar.js","components/Table/Table.js","components/Tables/Tables.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Jumbotron","className","Navbar","href","Table","props","scope","src","image","name","email","number","App","state","employees","allEmployees","sortBy","sort","newEmployeesArray","console","log","setState","employee1","employee2","filter","event","searchValue","target","value","employee","includes","type","placeholder","aria-label","onChange","this","onClick","map","key","id","React","Component","Tables","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"quFAAAA,EAAOC,QAAU,IAA0B,kC,wHCe5BC,MAZf,WACE,OAEF,yBAAKC,UAAU,UACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,cAAd,sBACA,uBAAGA,UAAU,aAAb,6F,MCEWC,MARf,WACI,OACI,yBAAKD,UAAU,0CACX,uBAAGA,UAAU,sBAAsBE,KAAK,KAAxC,a,yCCUGC,MAbf,SAAgBC,GACZ,OACI,+BACI,4BACA,wBAAIC,MAAM,OAAM,yBAAKC,IAAKF,EAAMG,SAChC,gCAAOH,EAAMI,KAAb,KACA,gCAAOJ,EAAMK,MAAb,KACA,gCAAOL,EAAMM,OAAb,QC+FGC,E,4MAnGXC,MAAQ,CACJC,UAAWA,EACXC,aAAcD,EACdE,OAAQ,gB,EAGZC,KAAO,WACH,IAAMC,EAAoB,EAAKL,MAAMC,UACrCK,QAAQC,IAAI,QACc,iBAAtB,EAAKP,MAAMG,OACX,EAAKK,SAAS,CACVL,OAAQ,UACRF,UAAWI,EAAkBD,MAAK,SAACK,EAAWC,GAC1C,OAAID,EAAUZ,MAAQa,EAAUb,MACrB,EAEPY,EAAUZ,MAAQa,EAAUb,OACpB,EAEL,OAIf,EAAKW,SAAS,CACVL,OAAQ,eACRF,UAAWI,EAAkBD,MAAK,SAACK,EAAWC,GAC1C,OAAID,EAAUZ,MAAQa,EAAUb,MACrB,EAEPY,EAAUZ,MAAQa,EAAUb,OACpB,EAEL,Q,EAMvBc,OAAS,SAACC,GACN,IAAMC,EAAcD,EAAME,OAAOC,MAEb,KAAhBF,EACA,EAAKL,SAAS,CACVP,UAAW,EAAKD,MAAME,eAI1B,EAAKM,SAAS,CACVP,UAAW,EAAKD,MAAME,aAAaS,QAAO,SAAAK,GACtC,QAAIA,EAASpB,KAAKqB,SAASJ,S,uDAUlC,IAAD,OACJ,OACI,oCACA,yBAAKzB,UAAU,gCACf,2BACIA,UAAU,uBACV8B,KAAK,SACLC,YAAY,SACZC,aAAW,SACXC,SAAUC,KAAKX,UAIvB,2BAAOvB,UAAU,uBACb,+BACI,4BACA,wBAAIK,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OACN,4BAAQ8B,QAASD,KAAKlB,MAAtB,UAEJ,wBAAIX,MAAM,OAAV,YAGH6B,KAAKtB,MAAMC,UAAUuB,KAAI,SAAAR,GAAQ,OAC9B,kBAAC,EAAD,CACIS,IAAMT,EAASU,GACf/B,MAAOqB,EAASrB,MAChBC,KAAOoB,EAASpB,KAChBC,MAAQmB,EAASnB,MACjBC,OAASkB,EAASlB,OAClBM,KAAM,EAAKA,gB,GA5FbuB,IAAMC,W,kBCeT7B,MAVf,WACE,OACE,yBAAKX,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACyC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.126c7475.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./Jumbotron.css\"\n\nfunction Jumbotron() {\n  return (\n\n<div className=\"header\">\n  <div className=\"card\">\n    <h1 className=\"card-title\">Employee Directory</h1>\n    <p className=\"card-text\">This directory allows you to filter employee by name as well as sorts by phone number!</p>\n  </div>\n</div>\n  );\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./Navbar.css\"\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar navbar-light bg-light row-fluid\">\n            <a className=\"navbar-brand span12\" href=\"#\">Welcome</a>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Table.css\"\n\nfunction Table (props) {\n    return (\n        <tbody>\n            <tr>\n            <th scope=\"row\"><img src={props.image}/></th>\n            <td> { props.name } </td>\n            <td> { props.email } </td>\n            <td> { props.number } </td>\n            </tr>\n        </tbody>\n    );\n}\n\nexport default Table;","import React from 'react';\nimport employees from \"../../employees.json\";\nimport Table from \"../Table/Table\";\n\nclass App extends React.Component {\n\n    state = {\n        employees: employees,\n        allEmployees: employees,\n        sortBy: 'alphabetical'\n    }\n\n    sort = () => {\n        const newEmployeesArray = this.state.employees;\n        console.log(\"sort\")\n        if (this.state.sortBy === 'alphabetical') {\n            this.setState({\n                sortBy: 'reverse',\n                employees: newEmployeesArray.sort((employee1, employee2) => {\n                    if (employee1.email > employee2.email) {\n                        return 1;\n                    }\n                    if (employee1.email < employee2.email) {\n                        return -1;\n                    }\n                    return 0;\n                })\n            })\n        } else {\n            this.setState({\n                sortBy: 'alphabetical',\n                employees: newEmployeesArray.sort((employee1, employee2) => {\n                    if (employee1.email < employee2.email) {\n                        return 1;\n                    }\n                    if (employee1.email > employee2.email) {\n                        return -1;\n                    }\n                    return 0;\n                })\n            })\n        }\n    }\n\n    filter = (event) => {\n        const searchValue = event.target.value;\n\n        if (searchValue === '') {\n            this.setState({\n                employees: this.state.allEmployees,\n            })\n        }\n        else {\n            this.setState({\n                employees: this.state.allEmployees.filter(employee => {\n                    if (employee.name.includes(searchValue)) {\n                        return true \n                    } else {\n                        return false\n                    }\n                })\n            })\n        }\n    }\n\n    render(){\n        return (\n            <>\n            <nav className=\"navbar navbar-light bg-light\">\n            <input\n                className=\"form-control mr-sm-2\"\n                type=\"search\"\n                placeholder=\"Search\"\n                aria-label=\"Search\"\n                onChange={this.filter}\n            />\n            </nav>\n\n        <table className=\"table table-striped\">\n            <thead>\n                <tr>\n                <th scope=\"col\">Image</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">\n                    <button onClick={this.sort}>Email</button>\n                </th>\n                <th scope=\"col\">Number</th>\n                </tr>\n            </thead>\n            {this.state.employees.map(employee => (\n                <Table\n                    key={ employee.id}\n                    image={employee.image}\n                    name={ employee.name }\n                    email={ employee.email }\n                    number={ employee.number }\n                    sort={this.sort}\n                    />\n            ))}\n        </table>\n        </>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Tables from \"./components/Tables/Tables\"\nimport logo from './logo.svg';\nimport './App.css';\nimport \"./components/Search/Search.css\"\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Jumbotron />\n      <Navbar />\n      <Tables />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}